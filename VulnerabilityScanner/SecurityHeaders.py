import urllib.request
from urllib.error import URLError, HTTPError


class SecurityHeaders:
    headers_list = ["Content-Security-Policy", "access-control-allow-origin",
                    "Referrer-Policy", "Clear-Site-Data"]
    deprecated_headers = ["x-content-security-policy", "x-webkit-csp", "Public-Key-Pins", "X-XSS-Protection"]

    def __init__(self, givenurl, quiet, nohttps):
        self.url = givenurl
        self.quiet = quiet
        if not nohttps:
            SecurityHeaders.headers_list.append("Strict-Transport-Security")

    def check_security_headers(self, report):
        if not self.quiet:
            print("[*] Checking security headers")

        # Make request to given url
        try:
            res = urllib.request.urlopen(self.url)
        except (HTTPError, URLError):
            return

        report.write_to_report(f"\n [*****] Security headers returned by URL: {self.url}: [*****] \n \n")
        # Check for deprecated headers
        for header in self.deprecated_headers:
            if res.getheader(header):
                report.write_to_report("[Deprecated] header found: " + header + " , please switch to secure header \n")

        # Check for proper security headers
        for header in self.headers_list:
            if not res.getheader(header):
                report.write_to_report("[Recommendation] header " + header +
                                       " not found, consider implementing it! \n")

        # Check for proper security headers with certain values
        # Check for x-frame-options
        x_frame_options = res.headers.get('X-Frame-Options', '').lower()
        if x_frame_options not in ['deny', 'sameorigin']:
            report.write_to_report("[Recommendation] header x-frame-options not found or not properly configured, "
                                   "please implement security header! \n")

        # Check for x-content-type-options
        x_content_type_options = res.headers.get('X-Content-Type-Options', '').lower()
        if x_content_type_options != 'nosniff':
            report.write_to_report(
                "[Recommendation] header x-content-type-options not found or not properly configured, "
                "please implement security header! \n")

        # Check for x-download-options
        x_download_options = res.headers.get('X-Download-Options', '').lower()
        if x_download_options != 'noopen':
            report.write_to_report("[Recommendation] File Download security is OFF, header x-download-options"
                                   " not found or not properly configured, please implement security header! \n")

        # Check for cache-control
        cache_control = res.headers.get('Cache-Control', '').lower()
        if not (cache_control.startswith('private') or cache_control.startswith('no-cache')):
            report.write_to_report("[Recommendation] No content caching policy, header cache-control not found"
                                   " or not properly configured, please implement security header! \n")

        # Check for X-Permitted-Cross-Domain-Policies
        x_permitted_cross_domain_policies = res.headers.get('X-Permitted-Cross-Domain-Policies', '').lower()
        if x_permitted_cross_domain_policies not in ['master-only', 'none']:
            report.write_to_report(
                "[Recommendation] X-Permitted-Cross-Domain-Policies header not found or not properly configured, "
                "please implement security header! \n")
