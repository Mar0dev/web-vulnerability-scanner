import urllib.request


class SecurityHeaders:
    headers_list = ["Content-Security-Policy", "access-control-allow-origin",
                    "Referrer-Policy", "Clear-Site-Data"]
    deprecated_headers = ["x-content-security-policy", "x-webkit-csp", "Public-Key-Pins", "X-XSS-Protection"]

    def __del__(self):
        if not self.quiet:
            print("[*] Security headers have been checked!")

    def __init__(self, givenurl, quiet, nohttps):
        self.url = givenurl
        self.quiet = quiet
        if not nohttps:
            SecurityHeaders.headers_list.append("Strict-Transport-Security")

    def check_security_headers(self, report):
        # Make request to given url
        if not self.quiet:
            print("[*] Checking security headers")
        res = urllib.request.urlopen(self.url)
        report.write_to_report("\n [*****] Security headers in application: [*****] \n \n")
        # Check for deprecated headers
        for header in self.deprecated_headers:
            if res.getheader(header):
                report.write_to_report("[Deprecated] header found: " + header + " , please switch to secure header \n")
        # Check for proper security headers
        for header in self.headers_list:
            if res.getheader(header):
                report.write_to_report("[Proper] header found: " + header + "\n")
            else:
                report.write_to_report("[Vulnerability] header " + header +
                                       " not found, consider implementing it! \n")

        # Check for proper security headers with certain values
        # Check for x-frame-options
        if res.getheader('x-frame-options') and res.getheader('x-frame-options').lower() \
                in ['deny', 'sameorigin']:
            report.write_to_report("[Proper] Cross-Frame scripting protection is ON, x-frame-options header found \n")
        else:
            report.write_to_report("[Vulnerability] header x-frame-options not found, "
                                   " please implement security header! \n")
        # Check for x-content-type-options
        if res.getheader('x-content-type-options') == 'nosniff':
            report.write_to_report("[Proper] Mime-Sniffing protection ON, x-content-type-option header found \n")
        else:
            report.write_to_report("[Vulnerability] header x-content-type-options ot found, "
                                   " please implement security header! \n")
        # Check for x-download-options
        if res.getheader('x-download-options') == 'noopen':
            report.write_to_report("[Proper] File download and ORP are ON, x-download-options header found \n")
        else:
            report.write_to_report("[Vulnerability] File Download security is OFF, header x-download-options"
                                   " not found, please implement security header! \n")
        # Check for cache-control
        if res.getheader('cache-control') and (res.getheader('cache-control').startswith('private') or
                                               res.getheader('cache-control').startswith('no-cache')):
            report.write_to_report("[Proper] Cache is set to Private or No-Cache, cache-control header found \n")
        else:
            report.write_to_report("[Vulnerability] No content caching policy, header cache-control not found"
                                   ", please implement security header! \n")
        # Check for X-Permitted-Cross-Domain-Policies
        if res.getheader('x-permitted-cross-domain-policies') == 'master-only' or \
                res.getheader('x-permitted-cross-domain-policies') == 'none':
            report.write_to_report("[Proper] X-Permitted-Cross-Domain-Policies header found \n")
        else:
            report.write_to_report("[Vulnerability] X-Permitted-Cross-Domain-Policies header not found, "
                                   "please implement security header! \n")
