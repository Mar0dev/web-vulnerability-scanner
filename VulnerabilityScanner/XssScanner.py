import os
import requests
import pprint
from fake_headers import Headers
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from VulnerabilityScanner.Injections import Injections
 

class XssScanner(Injections):

    def __del__(self):
        if not self.quiet:
            print("[*] XSS vulnerabilities have been checked ")

    def __init__(self, quiet, url):
        self.url = url
        self.quiet = quiet
        self.header = Headers(
            headers=True  # for misc headers
        )
        self.ses = requests.Session()

    def scan_host(self, report, xsspayload):
        report.write_to_report("\n [*****] Checking for XSS vulnerabilities [*****] \n \n")
        if not self.quiet:
            print("[*] Checking for XSS vulnerabilities")
        forms = XssScanner.get_all_forms_html(self.quiet, self.url)
        report.write_to_report("Number of detected forms in URL: " + str(len(forms)) + "\n")
        # Check if different payload file has been provided
        payloadfile = "./payloads/xss_payloads_short.txt"
        if xsspayload:
            path = './' + xsspayload
            ifexist = os.path.isfile(path)
            if ifexist:
                payloadfile = xsspayload
        # Iterate through forms and scripts in payload
        for form in forms:
            f_details = XssScanner.get_form_details(form)
            with open(payloadfile, "r") as f:
                for line in f:
                    script = line.strip()
                    # Submit modified form
                    content = XssScanner.__send_form(self, f_details, script).content.decode()
                    if script in content:
                        if not self.quiet:
                            print("[-] XSS vulnerability detected, skipping to next form")
                        report.write_to_report("[Vulnerability] Found XSS vulnerability! \n")
                        report.write_to_report("Form details of found vulnerability: \n \n")
                        report.write_to_report(pprint.pformat(f_details))
                        break

    def __send_form(self, form_details, given_script):
        self.ses.headers = self.header.generate()
        target_url = urljoin(self.url, form_details["action"])
        inputs = form_details["inputs"]
        data = {}
        for input in inputs:
            # Replace text and search values with JS script
            if input["type"] == "text" or input["type"] == "search":
                input["value"] = r"""{}""".format(given_script)     # Format to raw input with quotes
            input_name = input.get("name")
            input_value = input.get("value")
            if input_name and input_value:
                # Add input name to data that's being send
                data[input_name] = input_value
        # Check http method and perform post/get
        if form_details["method"] == "post":
            return self.ses.post(target_url, data=data)
        else:
            return self.ses.get(target_url, params=data)
