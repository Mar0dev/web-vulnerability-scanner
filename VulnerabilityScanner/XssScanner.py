import os
import requests
import pprint
from fake_headers import Headers
from urllib.parse import urljoin
from VulnerabilityScanner.Injections import Injections
 

class XssScanner(Injections):

    def __init__(self, quiet, url, vulnerabilities_tracker):
        super().__init__(quiet)
        self.url = url
        self.quiet = quiet
        self.vulnerabilities_tracker = vulnerabilities_tracker
        self.header = Headers(headers=True)
        self.ses = requests.Session()

    def scan_host(self, report, xsspayload):
        """
        Perform XSS scan
        Args:
            report: Report file object
            xsspayload: script argument pointing to XSS payloads file
        """
        if not self.quiet:
            print("[*] Checking for XSS vulnerabilities")
        forms = self.get_all_forms_html(self.quiet, self.url)
        report.write_to_report("\n Number of detected forms in URL: " + str(len(forms)) + "\n")
        payloadfile = "./payloads/xss_payloads_short.txt" if not xsspayload else xsspayload
        if os.path.isfile(payloadfile):
            with open(payloadfile, "r") as f:
                payloads = f.readlines()
        else:
            print("Payload file does not exist.")
            return

        for form in forms:
            f_details = self.get_form_details(form)
            for script in payloads:
                script = script.strip()
                form_data = XssScanner.prepare_form_data(f_details, script)
                response = XssScanner.submit_form(self, f_details['action'], f_details['method'], form_data)
                if script in response.content.decode():
                    unique_id = (f_details['action'], tuple(input['name'] for input in f_details['inputs']))
                    if unique_id not in self.vulnerabilities_tracker:
                        self.vulnerabilities_tracker.add(unique_id)
                        if not self.quiet:
                            print("[-] Found XSS vulnerability")
                        report.write_to_report("\n[Vulnerability] Found XSS vulnerability in form!\n")
                        report.write_to_report(pprint.pformat(f_details))

    @staticmethod
    def prepare_form_data(f_details, script):
        """
        Prepare form with JS payload
        Args:
            f_details: Details of the form
            script: JS payload

        Returns:
        """
        form_data = {}
        for input_element in f_details['inputs']:
            # Default to using the input element's original value
            input_value = input_element.get('value', '')

            # Inject payload into text and textarea inputs
            if input_element['type'] == 'text' or input_element['type'] == 'textarea':
                input_value = script
            elif input_element['type'] == 'submit':
                input_value = input_element.get('value', '')

            form_data[input_element['name']] = input_value

        return form_data

    def submit_form(self, action_url, method, form_data):
        """
        Submits a form with the injected script (XSS payload) and returns the response.
        Args:
            action_url: URL that will be entered
            method: Request method
            form_data: Data obtained from HTML form

        Returns:
        """
        url = urljoin(self.url, action_url if action_url else self.url)
        if method == "post":
            response = self.ses.post(url, data=form_data, headers=self.header.generate())
        else:  # Default to GET if not POST
            response = self.ses.get(url, params=form_data, headers=self.header.generate())
        return response
