import sys
import requests
import pprint
from fake_headers import Headers
from urllib.parse import urljoin
from bs4 import BeautifulSoup as bs
from VulnerabilityScanner.Injections import Injections


class SqlInjection(Injections):

    def __del__(self):
        if not self.quiet:
            print("[*] SQL Injection vulnerabilities have been checked")

    def __init__(self, quiet, url):
        self.header = Headers(
            headers=True # for misc headers
        )
        self.ses = requests.Session()
        self.quiet = quiet
        self.url = url

    def scan_host(self, report):
        report.write_to_report("\n [*****] Checking for SQL Injection vulnerabilities [*****] \n \n")
        if not self.quiet:
            print("[*] Checking for SQL Injection vulnerabilities")

        forms = SqlInjection.get_all_forms_html(self.quiet, self.url)

        for form in forms:
            self.ses.headers = self.header.generate()
            f_details = SqlInjection.get_form_details(form)
            for mark in "\"'":
                data = {}
                for tag in f_details["inputs"]:
                    if tag["type"] == "hidden" or tag["value"]:
                        data[tag["name"]] = tag["value"] + mark
                    elif tag["type"] != "submit":
                        data[tag["name"]] = f"test{mark}"
                url = urljoin(self.url, f_details["action"])

                if f_details["method"] == "post":
                    req = self.ses.post(url, data=data)
                elif f_details["method"] == "get":
                    req = self.ses.get(url, params=data)

                if SqlInjection.__find_strings(req):
                    if not self.quiet:
                        print("[-] Sql Injection vulnerability detected, checking next forms")
                    report.write_to_report("[Vulnerability] Found SQL Injection vulnerability! \n")
                    report.write_to_report("Form details of found vulnerability: \n \n")
                    report.write_to_report(pprint.pformat(f_details))
                    break

    def __find_strings(res):
        strings = {"error in your sql syntax", "warning: mysql", "quoted string not", "unclosed quotation mark"}

        for string in strings:
            if string in res.content.decode().lower():
                print(res.content.decode().lower())
                return True
        return False
